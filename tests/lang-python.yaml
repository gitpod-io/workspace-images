- desc: it should run python
  command: [python, --version]
  assert:
    - status == 0
    - stdout.indexOf("Python") != -1
- desc: it should have pip
  command: [pip, --version]
  assert:
    - status == 0
- desc: it should have pip3
  command: [pip3, --version]
  assert:
    - status == 0
- desc: it should have Python 3
  command: [python3, --version]
  assert:
    - status == 0
    - stdout.indexOf("Python 3") != -1
- desc: it should default to the correct pip version
  command: [sh, -c, '[ "$(pip --version)" = "$(pip3 --version)" ] && echo pass']
  assert:
    - status == 0
    - stdout.trim() == "pass"
- desc: pip packages should be installed inside $HOME/.pyenv/versions/<version>/ for imagebuild env
  entrypoint: [bash, -c]
  command:
    [
      pip install cowsay && python -c 'import cowsay; cowsay.cow("Gitpod")' && pip show cowsay,
    ]
  assert:
    - status == 0
    - stdout.indexOf("/home/gitpod/.pyenv/versions") != -1

- desc: pip packages should be installed inside /workspace/.pyenv_mirror for workspace-session env
  entrypoint: [env, GITPOD_REPO_ROOT=/workspace, bash, -ci]
  command:
    [
      pip install cowsay && python -c 'import cowsay; cowsay.cow("Gitpod")' && pip show cowsay,
    ]
  assert:
    - status == 0
    - stdout.indexOf("/workspace/.pyenv_mirror") != -1

- desc: "`pyenv install <ver>` should use $HOME/.pyenv/versions/ for imagebuild env"
  entrypoint: [bash, -c]
  command:
    [
      ver=3.9.0; pyenv install $ver && test -e $PYENV_ROOT/versions/$ver,
    ]
  assert:
    - status == 0

- desc: "`pyenv install <ver>` should use /workspace/.pyenv_mirror/fakeroot/versions/ for workspace-session env and multi-version shims should work"
  entrypoint: [env, GITPOD_REPO_ROOT=/workspace, bash, -ci]
  command:
    [
      ver=3.9.0; pyenv install $ver && test -d $GP_PYENV_FAKEROOT/versions/$ver && test -L $PYENV_ROOT/versions/$ver && pip install cowsay && pyenv global $(pyenv version-name) $ver && cowsay Gitpod,
    ]
  assert:
    - status == 0

- desc: "VSCode Python settings are correctly applied"
  entrypoint: [bash, -c]
  command: [export GITPOD_REPO_ROOT=/workspace/test; for sj in "$HOME/.vscode-server/data/Machine/settings.json" "/workspace/.vscode-remote/data/Machine/settings.json"; do mkdir -p $(dirname "$sj") "$GITPOD_REPO_ROOT" && touch "$sj" && bash -cli 'exit' && if ! grep -q 'python' "$sj"; then exit 1; fi; done]
  assert:
    - status == 0
